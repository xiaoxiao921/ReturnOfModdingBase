#include "config/config.hpp"
#include "file_manager/file_manager.hpp"
#include "hooks/hooking.hpp"
#include "logger/exception_handler.hpp"
#undef ERROR
#include "asmjit/asmjit.h"
#include "lua/lua_manager.hpp"
#include "memory/byte_patch_manager.hpp"
#include "paths/paths.hpp"
#include "threads/thread_pool.hpp"
#include "threads/util.hpp"

#include <directory_watcher/directory_watcher.hpp>
#include <logger/logger.hpp>
#include <lua/bindings/memory.hpp>
#include <memory/gm_address.hpp>
#include <polyhook2/PE/IatHook.hpp>
#include <rom/rom.hpp>
#include <windows.h>

extern "C"
{
	__declspec(dllexport) int rom_luajit_function_test(int res)
	{
		for (size_t i = 0; i < 10'000; i++)
		{
			res += i;
		}

		sol::state_view(big::g_lua_manager->lua_state()).script("local xd = 42\n");

		return res;
	}
}


//const char* some_var = "hello there";
//float some_var = 41.69;
//int some_var = 41;
bool some_var = 0;

//static void func_to_hook(const char* the_str, float some_float, double some_double, void* some_ptr, int8_t some_small_int, int64_t some_big_int)
static void func_to_hook(__int64 a1, int a2, __int16 a3, char a4)
//static decltype(some_var) func_to_hook(const char* the_str, float some_float, double some_double)
//static decltype(some_var) func_to_hook(const char* the_str)
//static decltype(some_var) func_to_hook(const char* the_str, float some_float)
{
	LOG(INFO) << "original function body: " << a1 << " " << a2 << " " << a3 << " " << (int)a4;
}

static int func_to_hook2(__int16 a1, int a2, __int16 a3, const char* a4)
{
	LOG(INFO) << "original function body2: " << a1 << " " << a2 << " " << a3 << " " << a4;

	return (int)a3;
}

struct special_class_test
{
	int m_val1   = 56'654;
	float m_val2 = 69.49f;
};

static int func_to_call(__int16 a1, int a2, __int16 a3, const char* a4, special_class_test& a5, special_class_test& a6)
{
	LOG(INFO) << "original function body3: " << a1 << " " << a2 << " " << a3 << " " << a4 << " - a5: " << a5.m_val1 << " " << a5.m_val2 << " - a6: " << a6.m_val1 << " " << a6.m_val2;

	return (int)a3;
}

static void call_test_lua_script(sol::state_view sol_state_view)
{
	auto res = sol_state_view.script(R"(
local ptr = memory.pointer:new(get_addr_func())

local ptr2 = memory.pointer:new(get_addr_func2())

local ptr3 = memory.pointer:new(get_addr_func3())

log.info("before dyn h")

memory.dynamic_hook("test_hook", "void", {"int64_t", "int", "uint16_t", "char"}, ptr,
--memory.dynamic_hook("test_hook", "int", {"const char*", "float", "double", "void*", "int8_t", "int64_t"}, ptr,
--memory.dynamic_hook("test_hook", "bool", {"const char*", "float", "double"}, ptr,
--memory.dynamic_hook("test_hook", "bool", {"const char*"}, ptr,
--memory.dynamic_hook("test_hook", "bool", {"const char*", "float"}, ptr,
--function(ret_val, the_str, some_float, some_double, some_ptr, some_small_int, some_big_int)
function(ret_val, a1, a2, a3, a4)

	--log.info("pre callback from lua", ret_val:get(), the_str:get(), some_float:get(), some_double:get(), some_ptr:get_address(), some_small_int:get(), some_big_int:get())
	log.info("pre callback from lua", "a1", a1:get(), "a2", a2:get(), "a3", a3:get(), "a4", a4:get())
	return true
end,
--function(ret_val, the_str, some_float, some_double, some_ptr, some_small_int, some_big_int)
function(ret_val, a1, a2, a3, a4)
	--log.info("post callback from lua 0", ret_val:get(), the_str:get(), some_float:get(), some_double:get(), some_ptr:get_address(), some_small_int:get(), some_big_int:get())
	--ret_val:set(79)
	--log.info("post callback from lua ", ret_val:get(), the_str:get(), some_float:get(), some_double:get(), some_ptr:get_address(), some_small_int:get(), some_big_int:get())
	--ret_val:set(90)

    log.info("post callback from lua", "a1", a1:get(), "a2", a2:get(), "a3", a3:get(), "a4", a4:get())
end)

log.info("after dyn h")

log.info(ptr)

local func_to_call_test_global_name = memory.dynamic_call("void", {"int64_t", "int", "uint16_t", "char"}, ptr)
local call_res_test = _G[func_to_call_test_global_name](69, 420, 21000, 126)
print("call_res_test: ", call_res_test)


local func_to_call_test_global_name2 = memory.dynamic_call("int", {"int16_t", "int", "int16_t", "const char*"}, ptr2)
local call_res_test2 = _G[func_to_call_test_global_name2](70, 421, 21001, "xddd")
print("call_res_test2: ", call_res_test2)


local special_class_test_inst1 = get_new_instance()
special_class_test_inst1.m_val1 = 69
special_class_test_inst1.m_val2 = 69.4299999

local special_class_test_inst2 = get_new_instance()
special_class_test_inst2.m_val1 = 70
special_class_test_inst2.m_val2 = 70.420
local func_to_call_test_global_name3 = memory.dynamic_call("int", {"int16_t", "int", "int16_t", "const char*", "special_class_test*", "special_class_test*"}, ptr3)
local call_res_test3 = _G[func_to_call_test_global_name3](70, 421, 21001, "xddd", memory.get_usertype_pointer(special_class_test_inst1), memory.get_usertype_pointer(special_class_test_inst2))
print("call_res_test3: ", call_res_test3)


memory.dynamic_hook_mid("test_hook", {"rax"}, {"special_class_test*"}, 0, ptr3:add(356), function(args)
	log.info(args[1].m_val1)
	log.info(args[1].m_val2)
end)

local call_res_test4 = _G[func_to_call_test_global_name3](70, 421, 21001, "call_res_test4", memory.get_usertype_pointer(special_class_test_inst1), memory.get_usertype_pointer(special_class_test_inst2))
print("call_res_test4: ", call_res_test4)

print("luajit version: ", jit.version)

jit.opt.start(3)
jit.opt.start("maxtrace=2000", "maxrecord=8000")
jit.opt.start("maxmcode=16384")
jit.opt.start("sizemcode=128")

ffi.cdef[[
	int rom_luajit_function_test(int res);
]]

local C = ffi.C

local func_ptr = ffi.cast("int (*)(int res) ", get_rom_luajit_function_test())

local start_time = os.clock()

for k = 1, 300000 do
	C.rom_luajit_function_test(42)
end

local end_time = os.clock()

print("ffi.C time elapsed: ", end_time - start_time)

local start_time3 = os.clock()

for k = 1, 300000 do
	call_rom_luajit_function_test(42)
end

local end_time3 = os.clock()

print("regular elapsed: ", end_time3 - start_time3)

local start_time2 = os.clock()

for k = 1, 300000 do
	func_ptr(42)
end

local end_time2 = os.clock()

print("ffi.cast time elapsed: ", end_time2 - start_time2)

)");
}

static void sgg__GUIComponentTextBox__GUIComponentTextBox_dctor(void* this_)
{
	big::g_hooking->get_original<sgg__GUIComponentTextBox__GUIComponentTextBox_dctor>()(this_);
}

int WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)
{
	using namespace big;

	rom::init("ReturnOfModdingBaseTest", "ReturnOfModdingBaseTest.exe", "");

	// Purposely leak it, we are not unloading this module in any case.
	auto exception_handling = new exception_handler(false, nullptr);

	// https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/setlocale-wsetlocale?view=msvc-170#utf-8-support
	setlocale(LC_ALL, ".utf8");
	// This also change things like stringstream outputs and add comma to numbers and things like that, we don't want that, so just set locale on the C apis instead.
	//std::locale::global(std::locale(".utf8"));

	std::filesystem::path root_folder = paths::get_project_root_folder();
	g_file_manager.init(root_folder);
	paths::init_dump_file_path();

	big::config::init_general();

	auto logger_instance = std::make_unique<logger>(rom::g_project_name, g_file_manager.get_project_file("./LogOutput.log"));

	static struct logger_cleanup
	{
		~logger_cleanup()
		{
			Logger::Destroy();
		}
	} g_logger_cleanup;

	{
		static auto GUIComponentTextBox_dctor_ptr = gmAddress::scan("8D 05 ? ? ? ? 48 8B F1 4C 8D B1", "sgg::GUIComponentTextBox::GUIComponentTextBox_dctor");
		if (GUIComponentTextBox_dctor_ptr)
		{
			static auto GUIComponentTextBox_dctor = GUIComponentTextBox_dctor_ptr.offset(-0x19);
			static auto hook_ = hooking::detour_hook_helper::add<sgg__GUIComponentTextBox__GUIComponentTextBox_dctor>("sgg__GUIComponentTextBox__GUIComponentTextBox_dctor", GUIComponentTextBox_dctor);
		}
	}
	auto hooking_instance = std::make_unique<hooking>();
	LOG(INFO) << "Hooking initialized.";

	g_hooking->enable();
	LOG(INFO) << "Hooking enabled.";

	auto L                    = luaL_newstate();
	auto lua_manager_instance = std::make_unique<lua_manager>(L,
	                                                          g_file_manager.get_project_folder("config"),
	                                                          g_file_manager.get_project_folder("plugins_data"),
	                                                          g_file_manager.get_project_folder("plugins"),
	                                                          [](sol::state_view& state, sol::table& lua_ext)
	                                                          {
		                                                          //lua_manager_extension::init_lua_api(state, lua_ext);
	                                                          });
	sol::state_view sol_state_view(L);
	// clang-format off
		sol_state_view.open_libraries(
			sol::lib::base,
			sol::lib::package,
			sol::lib::coroutine,
		    sol::lib::string,
		    sol::lib::os,
		    sol::lib::math,
			sol::lib::table,
			sol::lib::debug,
			sol::lib::bit32,
			sol::lib::io,
			sol::lib::utf8,
			sol::lib::jit,
			sol::lib::ffi
		);
	// clang-format on
	lua_manager_instance->init<lua_module>();
	LOG(INFO) << "Lua manager initialized.";

	// lua::memory dynamic_hook test
	{
		sol_state_view["get_rom_luajit_function_test"] = []() -> uintptr_t
		{
			return (uintptr_t)&rom_luajit_function_test;
		};

		auto bla = (int (*)(void)) & rom_luajit_function_test;

		sol_state_view["call_rom_luajit_function_test"] = bla;

		sol_state_view["get_addr_func"] = []() -> uintptr_t
		{
			return (uintptr_t)&func_to_hook;
		};

		sol_state_view["get_addr_func"] = []() -> uintptr_t
		{
			return (uintptr_t)&func_to_hook;
		};

		sol_state_view["get_addr_func2"] = []() -> uintptr_t
		{
			return (uintptr_t)&func_to_hook2;
		};

		sol_state_view["get_addr_func3"] = []() -> uintptr_t
		{
			return (uintptr_t)&func_to_call;
		};

		sol_state_view.new_usertype<special_class_test>("special_class_test", "m_val1", &special_class_test::m_val1, "m_val2", &special_class_test::m_val2);
		sol_state_view["get_new_instance"] = []() -> special_class_test*
		{
			auto* inst = new special_class_test;
			return inst;
		};
		lua::memory::add_type_info_from_string("special_class_test*",
		                                       [](lua_State* state_, char* arg_ptr) -> sol::object
		                                       {
			                                       return sol::make_object(state_, *(special_class_test**)arg_ptr);
		                                       });


		func_to_hook(0xff'ff'ff'ff'f5, 0xff'ff'ff, (__int16)0xff, (char)1);
		func_to_hook2(0xff'ff'ff'ff'f5, 0xff'ff'ff, (__int16)0xff, "orig func 2");

		call_test_lua_script(sol_state_view);

		Logger::FlushQueue();

		func_to_hook(0xff'ff'ff'ff'f5, 0xff'ff'ff, (__int16)0xff, (char)1);
		func_to_hook2(0xff'ff'ff'ff'f5, 0xff'ff'ff, (__int16)0xff, "orig func 2");

		special_class_test test1 = {};
		special_class_test test2 = {.m_val1 = 99'999, .m_val2 = 420.00002f};
		//func_to_call(1, 2, 3, "xdTEST", test1, test2);

		//LOG(INFO) << "res from func_to_hook: " << func_to_hook("orig", 69.025f, 420.69, (void*)0xde'ad, 126, 0x47'47'64'65);
		//LOG(INFO) << "res from func_to_hook: " << func_to_hook("orig", 69.025f, 420.69);
		//LOG(INFO) << "res from func_to_hook: " << func_to_hook("orig");
		//LOG(INFO) << "res from func_to_hook: " << func_to_hook("orig", 120.65f);
	}

	/*PLH::IatHook perfHook = PLH::IatHook("kernel32.dll", "QueryPerformanceCounter", (char*)&QueryPerformanceCounterHook, (uint64_t*)&g_orig_QueryPerformanceCounter, L"");
	perfHook.hook();*/

	while (true)
	{
		big::g_lua_manager->process_file_watcher_queue();

		Sleep(1000);
	}

	return 0;
}
